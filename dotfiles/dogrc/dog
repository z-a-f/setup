#!/usr/bin/env perl

use warnings;
use strict;

#use HTML::TagParser;
use Term::ANSIColor;

use vars qw/ %opt %lang $FH $filename $extension %CONFIG /;

use Data::Dumper; #Debug

our $DOGPATH = $ENV{"HOME"} . "/setup/dotfiles/dogrc";
# our %CONFIG;
# require "$DOGPATH/.dogrc";

#######################################
# Command line processing
#######################################
sub init () {
    use Getopt::Std;
    my $opt_string = 'hx:';
    getopts("$opt_string", \%opt) or help();
    help() if $opt{h};
    return getNames();
}

#######################################
# Help
#######################################
sub help() {
    print STDERR << "EOF";
NAME
    dog - prints the file to standatd output with source highlighting

SYNOPSIS
    dog [OPTION] [FILE]

DESCRIPTION
    -n
    	Show line numbers
    -x LANGUAGE
    	Specify explicitly the language fi the following input files (rather than letting the compiler choose a default based on the file name suffix). Possible values for LANGUAGE are:
    <TODO: Language list>

EOF
    exit;
}

#######################################
# Get the names
#######################################
sub getNames() {
    if (! $ARGV[0]) {
	die "No file to open, $!";
    }
    my $fname = $ARGV[0];
    my ($ext) = $fname =~ /(\.[^.]+)$/;
    open my $fh, '<', $fname or die "Cannot open file $fname, $!";
    return ($fh, $fname, $ext);
}

#######################################
# Open configuration and set the language
#######################################

sub config() {
    if (!$extension && !$opt{x}) {
	# If no explicit language + no extension
	cat();
	exit;
    } else {
	# return language($conf_fh);
	# print Dumper($CONFIG{'LANGS'});
	%CONFIG = do './.dogrc';
	# print Dumper(\%CONFIG);
    }
    my $langpath = findLang();
    if (! $langpath) {
	print colored("Cannot idetify language or configuration incorrect.\n", 'red');
	cat();
	exit;
    }
    return $langpath;
}

sub findLang() {
    foreach my $key1 (keys %CONFIG) {
	if ($key1 eq "LANGS") {
	    foreach my $key2 (keys %{$CONFIG{$key1}}) {
		# print $key2;
		if ($opt{x} && $key2 eq $opt{x}) { # If language is explicit
		    return $CONFIG{$key1}{$key2}{'FILE'};
		} elsif ($CONFIG{$key1}{$key2}{'REGEX'}) {	# If language is implied
		    my $regexp = "$CONFIG{$key1}{$key2}{'REGEX'}";
		    # print "$extension = $regexp: ";
		    # print $extension =~ /$regexp/;
		    # print "\n";
		    # return $extension;
		    if ($extension =~ /$regexp/) {
			return $CONFIG{$key1}{$key2}{'FILE'};
		    }
		}
	    }
	}
    }
    return 0;
}

#######################################
# CAT
#######################################
sub cat() {
    #open (FILE, "<$filename") or die "Cannot open file $filename, $!";
    print colored ("#######################################\n", 'green');
    print colored ("# Cannot identify language...\n", 'green');
    print colored ("#######################################\n", 'green');
    while (<$FH>) {
	print "$_";
    }
    print colored ("#######################################\n", 'green');
}

#######################################
# Process the colors and printing
#######################################
sub process{
    my $cName = $_[0];

    # Open Color file
    # print "$cName\n";
    %CONFIG = do "$cName";
    
    while (<$FH>) {
	# Foreach regex check in order and stop whenever found
	foreach my $reg (@{$CONFIG{PRIORITY}}) {
	    # print Dumper($CONFIG{REGEX}{$reg});
	    my $regexp = "$CONFIG{REGEX}{$reg}";
	    if (my ($line) = $_ =~ /$regexp/) {
		print colored ($line, "$CONFIG{COLOR}{$reg}");
		last;
	    }
	    
	}
	
	#foreach my $regex ($CONFIG{PRIORITY}) {
	#    print $CONFIG{REGEX}{PRIORITY} . "\n";
	#}
    }

}

#######################################
# Main
#######################################
($FH, $filename, $extension) = init();
my $colorFile = config();
process($colorFile);

#print $filename . "\n";
#print $extension . "\n";
